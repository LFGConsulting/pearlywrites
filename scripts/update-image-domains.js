import fs   from 'fs';
import path from 'path';

(async () => {
  // Use the environment variable already configured in Vercel
  const key = process.env.NEXT_PUBLIC_GHOST_CONTENT_API_KEY;
  const api = `https://seo-and-content-strategy.ghost.io/ghost/api/content/posts/` +
              `?key=${key}&fields=feature_image&include=authors`;

  // Ensure the key is available
  if (!key) {
    console.error('Error: NEXT_PUBLIC_GHOST_CONTENT_API_KEY environment variable is not set.');
    process.exit(1); // Exit if the key is missing
  }

  try {
    console.log(`Fetching posts from: ${api.split('?')[0]}...`); // Log URL without key
    const response = await fetch(api);
    
    if (!response.ok) {
      console.error(`Error fetching posts: ${response.status} ${response.statusText}`);
      // Attempt to read the body for more details, if available
      try {
          const errorBody = await response.text();
          console.error(`Response body: ${errorBody}`);
      } catch (e) {
          console.error('Could not read error response body.');
      }
      process.exit(1);
    }

    const { posts } = await response.json();
    console.log(`Fetched ${posts.length} posts.`);

    // Collect every external hostname we see (feature or author avatars)
    const hosts = new Set(
      posts.flatMap(p =>
        [p.feature_image, p?.primary_author?.profile_image]
          .filter(Boolean) // Ensure the URL exists
          .filter(u => u.startsWith('http')) // Ensure it's a full URL
          .map(u => {
              try {
                  return new URL(u).hostname;
              } catch (e) {
                  console.warn(`Warning: Could not parse URL: ${u}`);
                  return null; // Return null for invalid URLs
              }
          })
          .filter(Boolean) // Filter out nulls from invalid URLs
      )
    );
    console.log(`Found unique image hostnames: ${[...hosts].join(', ')}`);

    // Shape them for next/image â†’ remotePatterns
    const patterns = [...hosts].map(h => ({
      protocol: 'https',
      hostname: h,
      pathname: '**'
    }));

    const outputPath = path.join(process.cwd(), 'remote-patterns.generated.js');
    const outputContent = `// auto-generated by scripts/update-image-domains.js\n` +
                          `module.exports = ${JSON.stringify(patterns, null, 2)};\n`;

    fs.writeFileSync(outputPath, outputContent);
    console.log(`Successfully wrote ${patterns.length} patterns to ${outputPath}`);

  } catch (error) {
    console.error('Error running update-image-domains script:', error);
    process.exit(1); // Exit on error
  }
})(); 